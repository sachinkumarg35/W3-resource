use inventory;
/*1. From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Salesman
Sample table: Orders*/
SELECT *
FROM orders
WHERE salesman_id =
    (SELECT salesman_id 
     FROM salesman 
     WHERE name='Paul Adam');
     
select * from salesman;
select * from orders;
     
/*2. From the following tables write a SQL query to find all orders generated by London-based salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
Sample table: Salesman
Sample table: Orders*/
SELECT *
FROM orders
WHERE salesman_id IN
    (SELECT salesman_id 
     FROM salesman 
     WHERE city='London');
     
/*3. From the following tables write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. 
Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
Sample table: Salesman
Sample table: Orders*/
SELECT *
FROM orders
WHERE salesman_id =
    (SELECT DISTINCT salesman_id 
     FROM orders 
     WHERE customer_id =3007);
     
/*4. From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012. 
Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
Sample table: Salesman
Sample table: Orders*/
SELECT *
FROM orders
WHERE purch_amt >
    (SELECT  AVG(purch_amt) 
     FROM orders 
     WHERE ord_date ='2012/10/10');
     
/*5. From the following tables, write a SQL query to find all the orders generated in New York city. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Salesman
Sample table: Orders*/
SELECT *
FROM orders
WHERE salesman_id IN
    (SELECT salesman_id 
     FROM salesman 
     WHERE city ='New York');
     
/*6. From the following tables write a SQL query to determine the commission of the salespeople in Paris. Return commission.
Sample table: Salesman
Sample table: Customer*/
SELECT commission
FROM salesman
WHERE salesman_id IN
    (SELECT salesman_id 
     FROM customer
     WHERE city = 'Paris');
     
/*7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
Sample table: Salesman
Sample table: Customer*/
SELECT *
FROM customer
WHERE customer_id =
    (SELECT salesman_id -2001
     FROM salesman
     WHERE name = 'Mc Lyon');
     
/*8. From the following tables write a SQL query to count the number of customers with grades above the average in New York City. Return grade and count.  
Sample table: Customer*/
SELECT grade, COUNT(*)
FROM customer
GROUP BY grade
HAVING grade >
    (SELECT AVG(grade)
     FROM customer
     WHERE city = 'New York');
     
/*9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission. Return ord_no, purch_amt, ord_date, and salesman_id.
Sample table: Salesman
Sample table: Customer
Sameple table: Order*/
SELECT ord_no, purch_amt, ord_date, salesman_id 
FROM orders 
WHERE salesman_id IN(
SELECT salesman_id 
FROM salesman
WHERE commission = (
SELECT MAX(commission) 
FROM salesman));

/*10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012. 
Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
Sample table: Customer
Sameple table: Order*/
SELECT b.*, a.cust_name
FROM orders b, customer a
WHERE a.customer_id=b.customer_id
AND b.ord_date='2012-08-17';

/*11. From the following tables write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
Sample table: Salesman
Sample table: Customer*/
SELECT salesman_id,name 
FROM salesman a 
WHERE 1 < 
    (SELECT COUNT(*) 
     FROM customer 
     WHERE salesman_id=a.salesman_id);
     
/*12. From the following tables write a SQL query to find those orders, which are higher than the average amount of the orders. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Customer
Sameple table: Orders*/
SELECT * 
FROM orders a
WHERE purch_amt >
    (SELECT AVG(purch_amt) FROM orders b 
     WHERE b.customer_id = a.customer_id);  

/*13. From the following tables write a SQL query to find those orders that are equal or higher than the average amount of the orders. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Customer
Sameple table: Orders*/
SELECT * 
FROM orders a
WHERE purch_amt >=
    (SELECT AVG(purch_amt) FROM orders b 
     WHERE b.customer_id = a.customer_id);
     
/*14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at least 1000.00 above 
the maximum order amount for that date.
Sample table: Customer
Sameple table: Orders*/
SELECT ord_date, SUM(purch_amt)
FROM orders a
GROUP BY ord_date
HAVING SUM(purch_amt) >
    (SELECT 1000.00 + MAX(purch_amt) 
     FROM orders b 
     WHERE a.ord_date = b.ord_date);
     
/*15. Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table are located in London.
Sample table: Customer*/
SELECT customer_id,cust_name, city
FROM customer
WHERE EXISTS
   (SELECT *
    FROM customer 
    WHERE city='London');
    
/*16. From the following tables write a SQL query to find salespeople who deal with multiple customers. Return salesman_id, name, city and commission.
Sample table: Customer
Sample table: Salesman*/
SELECT * 
FROM salesman 
WHERE salesman_id IN (
   SELECT DISTINCT salesman_id 
   FROM customer a 
   WHERE EXISTS (
      SELECT * 
      FROM customer b 
      WHERE b.salesman_id=a.salesman_id 
      AND b.cust_name<>a.cust_name));
      
/*17. From the following tables write a SQL query to find salespeople who deal with a single customer. Return salesman_id, name, city and commission.
Sample table: Customer
Sample table: Salesman*/
SELECT * 
FROM salesman 
WHERE salesman_id IN (
   SELECT DISTINCT salesman_id 
   FROM customer a 
   WHERE NOT EXISTS (
      SELECT * FROM customer b 
      WHERE a.salesman_id=b.salesman_id 
      AND a.cust_name<>b.cust_name));
      
/*18. From the following tables, write a SQL query to find the salespeople who deal the customers with more than one order. Return salesman_id, name, city and commission.
Sample table: Salesman
Sample table: Orders
Sample table: Customer*/ 
SELECT * 
FROM salesman a 
WHERE EXISTS     
   (SELECT * FROM customer b     
    WHERE a.salesman_id=b.salesman_id     
	 AND 1<             
	     (SELECT COUNT(*)              
		  FROM orders             
		  WHERE orders.customer_id =            
		  b.customer_id));
          
/*19. From the following tables write a SQL query to find the salespeople who deal with those customers who live in the same city. 
Return salesman_id, name, city and commission.
Sample table: Salesman
Sample table: customer*/
SELECT *
FROM salesman 
WHERE city=ANY
    (SELECT city
     FROM customer);
     
/*20. From the following tables write a SQL query to find salespeople whose place of residence matches any city where customers live. 
Return salesman_id, name, city and commission.
Sample table: Salesman
Sample table: customer*/
SELECT *
FROM salesman 
WHERE city IN
    (SELECT city
     FROM customer);
     
/*21. From the following tables write a SQL query to find all those salespeople whose names appear alphabetically lower than the customerâ€™s name. 
Return salesman_id, name, city, commission.
Sample table: Salesman
Sample table: customer*/
SELECT *
FROM salesman a
WHERE EXISTS
   (SELECT *
	FROM CUSTOMER b
	WHERE  a.name  < b.cust_name);
    
/*22. From the following table write a SQL query to find all those customers with a higher grade than all the customers alphabetically below the city of New York. 
Return customer_id, cust_name, city, grade, salesman_id.
Sample table: Customer*/
SELECT *
FROM customer
WHERE grade > ANY
   (SELECT grade
	FROM CUSTOMER
	WHERE  city < 'New York');
    
/*23. From the following table write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Orders*/
SELECT *
FROM Orders
WHERE purch_amt > ANY
   (SELECT purch_amt
	FROM orders
	WHERE  ord_date='2012/09/10');

/*24. From the following tables write a SQL query to find orders where the order amount is less than the order amount of a customer residing in London City. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Orders
Sample table: Customer*/
SELECT *
FROM orders
WHERE purch_amt < ANY
   (SELECT purch_amt
	FROM orders a, customer b
	WHERE  a.customer_id=b.customer_id
	AND b.city='London');
    
/*25. From the following tables write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives in London City. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
Sample table: Orders
Sample table: Customer*/
SELECT *
FROM orders
WHERE purch_amt < 
   (SELECT MAX(purch_amt)
	FROM orders a, customer b
	WHERE  a.customer_id=b.customer_id
	AND b.city='London');
    
/*26. From the following tables write a SQL query to find those customers whose grades are higher than those living in New York City. 
Return customer_id, cust_name, city, grade and salesman_id.
Sample table: Customer*/
SELECT *
FROM customer
WHERE grade > ALL
   (SELECT grade
	FROM customer
	WHERE city='New York');
    
/*27. From the following tables write a SQL query to calculate the total order amount generated by a salesperson. Salespersons should be from the cities where the 
customers reside. Return salesperson name, city and total order amount.
Sample table: Orders
Sample table: Salesman
Sample table: Customer*/
SELECT salesman.name, salesman.city, subquery1.total_amt FROM 
salesman, (SELECT salesman_id, SUM(orders.purch_amt) AS total_amt 
FROM orders GROUP BY salesman_id) subquery1 WHERE subquery1.salesman_id = salesman.salesman_id AND
salesman.city IN (SELECT DISTINCT city FROM customer);

/*28. From the following tables write a SQL query to find those customers whose grades are not the same as those who live in London City. 
Return customer_id, cust_name, city, grade and salesman_id.
Sample table: Customer*/
SELECT * FROM customer WHERE grade <> ALL 
(SELECT grade FROM customer WHERE city='London' AND NOT grade IS NULL);

/*29. From the following tables write a SQL query to find those customers whose grades are different from those living in Paris. 
Return customer_id, cust_name, city, grade and salesman_id.
Sample table: Customer*/
SELECT *
FROM customer 
WHERE grade NOT IN
   (SELECT grade
	FROM customer
	WHERE city='Paris');
    
/*30. From the following tables write a SQL query to find all those customers who have different grades than any customer who lives in Dallas City. 
Return customer_id, cust_name,city, grade and salesman_id.
Sample table: Customer*/
SELECT *
FROM customer 
WHERE NOT grade = ANY
   (SELECT grade
	FROM customer
	WHERE city='Dallas');
    
/*31. From the following tables write a SQL query to calculate the average price of each manufacturer's product along with their name. Return Average Price and Company.
Sample table: company_mast
Sample table: item_mast*/
SELECT AVG(pro_price) AS "Average Price", 
   company_mast.com_name As "Company"
   FROM item_mast, company_mast
        WHERE item_mast.pro_com= company_mast.com_id
           GROUP BY company_mast.com_name;
           
/*32. From the following tables write a SQL query to calculate the average price of each manufacturer's product of 350 or more. Return Average Price and Company.
Sample table: company_mast
Sample table: item_mast*/
SELECT AVG(pro_price) AS "Average Price", 
   company_mast.com_name AS "Company"
      FROM item_mast, company_mast
         WHERE item_mast.pro_com= company_mast.com_id
           GROUP BY company_mast.com_name
   HAVING AVG(pro_price) >= 350;
   
/*33. From the following tables, write a SQL query to find the most expensive product of each company. Return Product Name, Price and Company.
Sample table: company_mast
Sample table: item_mast*/
SELECT P.pro_name AS "Product Name", 
       P.pro_price AS "Price", 
       C.com_name AS "Company"
   FROM item_mast P, company_mast C
   WHERE P.pro_com = C.com_id
     AND P.pro_price =
     (
       SELECT MAX(P.pro_price)
         FROM item_mast P
         WHERE P.pro_com = C.com_id
     );
     
/*34. From the following tables write a SQL query to find employees whose last name is Gabriel or Dosio. Return emp_idno, emp_fname, emp_lname and emp_dept.
Sample table: emp_details*/
SELECT * 
  FROM emp_details
   WHERE emp_lname IN ('Gabriel' , 'Dosio');
   
/*35. From the following tables, write a SQL query to find the employees who work in department 89 or 63. Return emp_idno, emp_fname, emp_lname and emp_dept.
Sample table: emp_department
Sample table: emp_details*/
SELECT * 
  FROM emp_details
  WHERE emp_dept IN (89,63);
  
/*36. From the following tables write a SQL query to find those employees who work for the department where the departmental allotment amount is more than Rs. 50000. 
Return emp_fname and emp_lname.
Sample table: emp_department
Sample table: emp_details*/
SELECT emp_fname, emp_lname 
 FROM emp_details
  WHERE emp_dept IN
  (SELECT dpt_code 
     FROM emp_department 
       WHERE dpt_allotment > 50000);
       
/*37. From the following tables write a SQL query to find the departments whose sanction amount is higher than the average sanction amount for all departments. 
Return dpt_code, dpt_name and dpt_allotment.
Sample table: emp_department*/
SELECT *
  FROM emp_department
  WHERE dpt_allotment >
  (
    SELECT AVG(dpt_allotment)
    FROM emp_department
  );
  
/*38. From the following tables write a SQL query to find which departments have more than two employees. Return dpt_name.
Sample table: emp_department
Sample table: emp_details*/
SELECT dpt_name FROM emp_department
  WHERE dpt_code IN
  (
    SELECT emp_dept
      FROM emp_details
      GROUP BY emp_dept
      HAVING COUNT(*) >2
  );
  
/*39. From the following tables write a SQL query to find the departments with the second lowest sanction amount. Return emp_fname and emp_lname.
Sample table: emp_department
Sample table: emp_details*/
SELECT emp_fname, emp_lname 
FROM emp_details 
WHERE emp_dept IN (
  SELECT dpt_code
  FROM emp_department 
  WHERE dpt_allotment= (
    SELECT MIN(dpt_allotment)
    FROM emp_department 
    WHERE dpt_allotment >
 (SELECT MIN(dpt_allotment) 
      FROM emp_department )));
